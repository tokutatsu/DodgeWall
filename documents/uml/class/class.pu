@startuml class
title dodgeWall

package unit {
    abstract Unit {
        abstract draw(): void
    }

    class Ball {
        - color: Color
        - point: Point
        - name: String
        - position: int

        + Ball(name: String)

        + getPoint(): Point
        + getPosition(): int

        + void keyTyped(e: KeyEvent): void
        + void keyPressed(e: KeyEvent): void
        + keyReleased(e: KeyEvent): void

        + draw(g: Graphics): void
    }

    class Lane {
        - lane: Polygon
        - color: Color

        + Lane(name: String)

        + getPolygon(): Polygon

        + draw(g: Graphics): void
    }

    class Wall {
        - color: Color
        - wall: Polygon
        - name: String
        - moveCount: int
        - alpha: int
        - int: position

        + Wall(name: String)

        + move(): void
        + isVisible(): boolean
        + 
        + getButtomLeft(): int
        + getPosition(): int

        + draw(g: Graphics): void
    }

    class Background {
        - color: Collor
        - background: Polygon
        - name: String
        - moveCount: int
        - alpha: int

        + Backround(name: String)

        + move(): void
        + isVisible(): boolean
        +

        + draw(g: Graphics): void
    }
}

package config {
    class BackgroundConfig {
    }
    
    class BallConfig {

    }

    class LaneConfig {

    }

    class WallConfig {

    }

    class WindowConfig {
        height
        width
    }
}

package scene {
    class Play {

    }

    class Result {

    }
    
    class Title {
        
    }
}

package process {
    class Judge {
        hitJudge(ballPoint, ballSize, wallPoint, wallSpeed)
    }

    class Score {
        setMyHighScore(score)
        getMyHighScore()
    }
}

class Main {
    + main(): void
}

Ball --|> Unit
Wall --|> Unit
Lane --|> Unit
Background --|> Unit

@enduml