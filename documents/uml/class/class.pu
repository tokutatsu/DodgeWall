@startuml class
title dodgeWall

class Main {
    + main(): void
}

package unit {
    abstract Unit {
        abstract draw(): void
    }

    class Ball {
        - color: Color
        - point: Point
        - name: String
        - position: int

        + Ball(name: String)

        + getPoint(): Point
        + getPosition(): int

        + void keyTyped(e: KeyEvent): void
        + void keyPressed(e: KeyEvent): void
        + keyReleased(e: KeyEvent): void

        + draw(g: Graphics): void
    }

    class Lane {
        - lane: Polygon
        - color: Color

        + Lane(name: String)

        + getPolygon(): Polygon

        + draw(g: Graphics): void
    }

    class Wall {
        - color: Color
        - wall: Polygon
        - name: String
        - moveCount: int
        - alpha: int
        - int: position

        + Wall(name: String)

        + move(): void
        + isVisible(): boolean
        + shouldCreateWall(): boolean
        + getButtomLeft(): int
        + getPosition(): int

        + draw(g: Graphics): void
    }

    class Background {
        - color: Collor
        - background: Polygon
        - name: String
        - moveCount: int
        - alpha: int

        + Backround(name: String)

        + move(): void
        + isVisible(): boolean
        + shouldCreateBackground(): boolean

        + draw(g: Graphics): void
    }
}

package config {
    class BackgroundConfig {
        - x: int[]
        - y: int[]

        + background1: Polygon
        + background2: Polygon

        + upper: int
        + right: int
        + left: int

        + upperIncreaseBackground1: Point
        + rightIncreaseBackground1: Point
        + leftIncreaseBackground1: Point

        + upperIncreaseBackground: Point
        + rightIncreaseBackground: Point
        + leftIncreaseBackground: Point

        + frame: int

        + alpha: int
        + maxAlpha: int
        + alphaIncrease: int
        + color: Color

        + pieces: int
    }

    class WallConfig {
        - heightSize: int
        - xWall1: int[]
        - xWall2: int[]
        - xWall3: int[]
        - xWall4: int[]
        - yWall: int[]

        + upperRight: int
        + buttomRight: int
        + buttomLeft: int
        + upperLeft: int

        + xRightIncreaseWall1: int
        + xLeftIncreaseWall1: int
        + xRightIncreaseWall2: int
        + xLeftIncreaseWall2: int
        + xRightIncreaseWall3: int
        + xLeftIncreaseWall3: int
        + xRightIncreaseWall4: int
        + xLeftIncreaseWall4: int
        + yUpperIncrease: int
        + yBottomIncrease: int

        + wall1: Polygon
        + wall2: Polygon
        + wall3: Polygon
        + wall4: Polygon

        + frame: int
        + alpha: int
        + maxAlpha: int
        + alphaIncrease: int
        + color: Color
        + pieces: int
    }

    class LaneConfig {
        - upperWidth: int
        - bottomWidth: int
        - xLane1: int[]
        - xLane2: int[]
        - xLane3: int[]
        - xLane4: int[]
        - yLane: int[]
        - xBack: int[]
        - yBack: int[]

        + border: int 
        + lane1: Polygon
        + lane2: Polygon
        + lane3: Polygon
        + lane4: Polygon
        + back: Polygon
        + laneColor: Color
        + backColor: Color
    }

    class BallConfig {
        + size: int

        + color: Color

        + xBall: int
        + yBall: int

        + moveDistance: int

        + ball1: Point
        + ball2: Point
        + ball3: Point
        + ball4: Point
    }

    class WindowConfig {
        + Height: int
        + Width: int

        + headY: int
        + headFont: Font
        + headColor: Color

        + buttonHeight: int
        + buttonWidth: int
        + leftButtonPoint: Point 
        + rightButtonPoint: Point

        + titleButtonPoint: Point
        + titleButtonWidth: int
        + titleButtonHeight: int

        + exitButtonPoint: Point
        + exitButtonWidth: int
        + exitButtonHeight: int
    }

    class PlayConfig {
        + maxSleepTime: int
        + minSleepTime: int
        + displayTime: int
        + font: Font
        + positionY: int
        + height: int
    }

    class RecordConfig {
        + recordY: int
        + distance: int
        + recordFont: Font
        + recordColor: Color

        + rankX: int
        + userNameX: int
        + scoreX: int
    }

    class ResultConfig {
        + fontColor: Color

        + highScoreFont: Font
        + highScoreY: int

        + inputUserNameHeight: int
        + inputUserNameWidth: int
        + inputUserNamePoint: Point
    }
}

package scene {
    class Screen {
        + Screen()

        + changeJPanel(panel: JPanel)
    }

    class Title {
        - startButton: JButton
        - rankingButton: JButton
        - exitButton: JButton
        - screen: Screen
        
        + Title(screen: Screen)

        + actionPerfomed(e: ActionEvent): void
        + paintComponent(g: Graphics): void
    }

    class Play {
        - random: Random
        - thread: Thread
        - sleepTime: int
        - leftBackgroundList: ArrayList<Background>
        - rightBackgroundList: ArrayList<Background>
        - back: Lane
        - lane1: Lane
        - lane2: Lane
        - lane3: Lane
        - lane4: Lane
        - leftWallList: ArrayList<Wall>
        - rightWallList: ArrayList<Wall>
        - leftBall: Ball
        - rightBall: Ball
        - screen: Screen
        - gameOverFlag: boolean

        + Play(screen: Screen)

        - init(): void
        - move(): void
        - startThread(): void
        - stopThread(): void

        + paintComponent(g: Graphics): void
        + run(): void
    }

    class Result {
        - score: int
        - fontMetrics: FontMetorics
        - userName: String
        - scoreMessage: String
        - inputUserName: JTextField
        - titleButton: JButton
        - retryButton: JButton
        - rankingButton: JButton
        - exitButton: JButton
        - screen: Screen

        + Result(score: int, screen: Screen)

        + actionPerfomed(e: ActionEvent): void
        + paintComponent(g: Graphics): void
    }
    
    class Record {
        - titleButton: JButton
        - exitButton: JButton
        - screen: Screen

        + Record(screen: Screen)

        + actionPerfomed(e: ActionEvent): void
        + paintComponent(g: Graphics): void
    }
}

package process {
    class Score {
        - score: int

        + init(): void
        + addScore(): void
        + getScore(): int
    }

    class Ranking {
        + getTopTenRanking(): ArrayList<HashMap<String, String>>
        + updateRanking(userName: String, score: int): void
    }

    class Judge {
        + hitJudge(leftBall: Ball, leftWallList: ArrayList<Wall>, rightBall: Ball, rightWallList: ArrayList<Wall>): boolean
        - checkAllWall(ball: Ball, wallList: ArrayList<Wall>): boolean
        - checkEachWall(ball: Ball, wall: Wall): boolean
    }
}

Ball --|> Unit
Wall --|> Unit
Lane --|> Unit
Background --|> Unit

Play -- Ball
Play -- Wall
Play -- Lane
Play -- Background

Screen -- Title
Screen -- Play
Screen -- Result
Screen -- Record

@enduml