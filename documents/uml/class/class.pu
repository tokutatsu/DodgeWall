@startuml class
title dodgeWall

class Main {
    + main(): void
}

package unit {
    abstract Unit {
        abstract draw(): void
    }

    class Ball {
        - color: Color
        - point: Point
        - name: String
        - position: int

        + Ball(name: String)

        + getPoint(): Point
        + getPosition(): int

        + void keyTyped(e: KeyEvent): void
        + void keyPressed(e: KeyEvent): void
        + keyReleased(e: KeyEvent): void

        + draw(g: Graphics): void
    }

    class Lane {
        - lane: Polygon
        - color: Color

        + Lane(name: String)

        + getPolygon(): Polygon

        + draw(g: Graphics): void
    }

    class Wall {
        - color: Color
        - wall: Polygon
        - name: String
        - moveCount: int
        - alpha: int
        - int: position

        + Wall(name: String)

        + move(): void
        + isVisible(): boolean
        + shouldCreateWall(): boolean
        + getButtomLeft(): int
        + getPosition(): int

        + draw(g: Graphics): void
    }

    class Background {
        - color: Collor
        - background: Polygon
        - name: String
        - moveCount: int
        - alpha: int

        + Backround(name: String)

        + move(): void
        + isVisible(): boolean
        + shouldCreateBackground(): boolean

        + draw(g: Graphics): void
    }
}

package config {
    class BackgroundConfig {

    }
    
    class BallConfig {

    }

    class LaneConfig {

    }

    class WallConfig {

    }

    class PlayConfig {

    }

    class RecordConfig {

    }

    class ResultConfig {

    }

    class WindowConfig {
        height
        width
    }
}

package scene {
    class Screen {
        + Screen()

        + changeJPanel(panel: JPanel)
    }

    class Title {
        - startButton: JButton
        - rankingButton: JButton
        - exitButton: JButton
        - screen: Screen
        
        + Title(screen: Screen)

        + actionPerfomed(e: ActionEvent): void
        + paintComponent(g, Graphics): void
    }

    class Play {
        - random: Random
        - thread: Thread
        - sleepTime: int
        - leftBackgroundList: ArrayList<Background>
        - rightBackgroundList: ArrayList<Background>
        - back: Lane
        - lane1: Lane
        - lane2: Lane
        - lane3: Lane
        - lane4: Lane
        - leftWallList: ArrayList<Wall>
        - rightWallList: ArrayList<Wall>
        - leftBall: Ball
        - rightBall: Ball
        - screen: Screen
        - gameOverFlag: boolean

        + Play(screen: Screen)

        - init(): void
        - move(): void
        - startThread(): void
        - stopThread(): void

        + paintComponent(g, Graphics): void
        + run(): void
    }

    class Result {
        - score: int
        - fontMetrics: FontMetorics
        - userName: String
        - scoreMessage: String
        - inputUserName: JTextField
        - titleButton: JButton
        - retryButton: JButton
        - rankingButton: JButton
        - exitButton: JButton
        - screen: Screen

        + Result(score: int, screen: Screen)

        + actionPerfomed(e: ActionEvent): void
        + paintComponent(g, Graphics): void
    }
    
    class Record {
        - titleButton: JButton
        - exitButton: JButton
        - screen: Screen

        + Record(screen: Screen)

        + actionPerfomed(e: ActionEvent): void
        + paintComponent(g, Graphics): void
    }
}

package process {
    class Judge {
        + hitJudge(leftBall: Ball, leftWallList: ArrayList<Wall>, rightBall: Ball, rightWallList: ArrayList<Wall>): boolean
        - checkAllWall(ball: Ball, wallList: ArrayList<Wall>): boolean
        - checkEachWall(ball: Ball, wall: Wall): boolean
    }

    class Score {
        - score: int

        + init(): void
        + addScore(): void
        + getScore(): int
    }

    class Ranking {
        + getTopTenRanking(): ArrayList<HashMap<String, String>>
        + updateRanking(userName: String, score: int): void
    }
}

Ball --|> Unit
Wall --|> Unit
Lane --|> Unit
Background --|> Unit

Play -- Ball
Play -- Wall
Play -- Lane
Play -- Background

Screen -- Title
Screen -- Play
Screen -- Result
Screen -- Record

@enduml